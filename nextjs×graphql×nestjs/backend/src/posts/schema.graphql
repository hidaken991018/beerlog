type Query {
  users: [User!]!
  user(id: Int!): User
  beerPosts: [BeerPost!]!
  beerPostsById(id: Int!): BeerPost
  beerPost(id: Int!): BeerPost
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(id: Int!, input: UpdateUserInput!): User!
  deleteUser(id: Int!): User!

  createBeerPost(input: CreateBeerPostInput!): BeerPost!
  updateBeerPost(id: Int!, input: UpdateBeerPostInput!): BeerPost!
  deleteBeerPost(id: Int!): BeerPost!
}

type User {
  id: Int!
  email: String!
  name: String
  avatarUrl: String
  beerPosts: [BeerPost]
}

type BeerPost {
  id: Int!
  beerName: String!
  brewery: String
  style: String
  abv: Float
  purchaseLocation: String
  rating: Float!
  comment: String
  photoUrl: String
  createdAt: Date!
  updatedAt: Date!
  user: User
}

input CreateUserInput {
  email: String!
  name: String
  avatarUrl: String
}

input UpdateUserInput {
  email: String
  name: String
  avatarUrl: String
}

input CreateBeerPostInput {
  beerName: String!
  brewery: String
  style: String
  abv: Float
  purchaseLocation: String
  rating: Float!
  comment: String
  photoUrl: String
  userId: Int!
}

input UpdateBeerPostInput {
  beerName: String
  brewery: String
  style: String
  abv: Float
  purchaseLocation: String
  rating: Float
  comment: String
  photoUrl: String
}

scalar Date
